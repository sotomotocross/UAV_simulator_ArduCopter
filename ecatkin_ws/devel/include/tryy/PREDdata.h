// Generated by gencpp from file tryy/PREDdata.msg
// DO NOT EDIT!


#ifndef TRYY_MESSAGE_PREDDATA_H
#define TRYY_MESSAGE_PREDDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tryy
{
template <class ContainerAllocator>
struct PREDdata_
{
  typedef PREDdata_<ContainerAllocator> Type;

  PREDdata_()
    : header()
    , box_1()
    , box_2()
    , box_3()
    , box_4()
    , stamp()  {
    }
  PREDdata_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , box_1(_alloc)
    , box_2(_alloc)
    , box_3(_alloc)
    , box_4(_alloc)
    , stamp()  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _box_1_type;
  _box_1_type box_1;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _box_2_type;
  _box_2_type box_2;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _box_3_type;
  _box_3_type box_3;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _box_4_type;
  _box_4_type box_4;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::tryy::PREDdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tryy::PREDdata_<ContainerAllocator> const> ConstPtr;

}; // struct PREDdata_

typedef ::tryy::PREDdata_<std::allocator<void> > PREDdata;

typedef boost::shared_ptr< ::tryy::PREDdata > PREDdataPtr;
typedef boost::shared_ptr< ::tryy::PREDdata const> PREDdataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tryy::PREDdata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tryy::PREDdata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tryy::PREDdata_<ContainerAllocator1> & lhs, const ::tryy::PREDdata_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.box_1 == rhs.box_1 &&
    lhs.box_2 == rhs.box_2 &&
    lhs.box_3 == rhs.box_3 &&
    lhs.box_4 == rhs.box_4 &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tryy::PREDdata_<ContainerAllocator1> & lhs, const ::tryy::PREDdata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tryy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tryy::PREDdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tryy::PREDdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tryy::PREDdata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tryy::PREDdata_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tryy::PREDdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tryy::PREDdata_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tryy::PREDdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "daae477024268b88941e5fe84cf3bcb0";
  }

  static const char* value(const ::tryy::PREDdata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdaae477024268b88ULL;
  static const uint64_t static_value2 = 0x941e5fe84cf3bcb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::tryy::PREDdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tryy/PREDdata";
  }

  static const char* value(const ::tryy::PREDdata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tryy::PREDdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32[] box_1\n"
"int32[] box_2\n"
"int32[] box_3\n"
"int32[] box_4\n"
"time stamp\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tryy::PREDdata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tryy::PREDdata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.box_1);
      stream.next(m.box_2);
      stream.next(m.box_3);
      stream.next(m.box_4);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PREDdata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tryy::PREDdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tryy::PREDdata_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "box_1[]" << std::endl;
    for (size_t i = 0; i < v.box_1.size(); ++i)
    {
      s << indent << "  box_1[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.box_1[i]);
    }
    s << indent << "box_2[]" << std::endl;
    for (size_t i = 0; i < v.box_2.size(); ++i)
    {
      s << indent << "  box_2[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.box_2[i]);
    }
    s << indent << "box_3[]" << std::endl;
    for (size_t i = 0; i < v.box_3.size(); ++i)
    {
      s << indent << "  box_3[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.box_3[i]);
    }
    s << indent << "box_4[]" << std::endl;
    for (size_t i = 0; i < v.box_4.size(); ++i)
    {
      s << indent << "  box_4[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.box_4[i]);
    }
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRYY_MESSAGE_PREDDATA_H
